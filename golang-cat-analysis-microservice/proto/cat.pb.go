// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: cat.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatName string `protobuf:"bytes,1,opt,name=catName,proto3" json:"catName,omitempty"`
}

func (x *CatRequest) Reset() {
	*x = CatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatRequest) ProtoMessage() {}

func (x *CatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatRequest.ProtoReflect.Descriptor instead.
func (*CatRequest) Descriptor() ([]byte, []int) {
	return file_cat_proto_rawDescGZIP(), []int{0}
}

func (x *CatRequest) GetCatName() string {
	if x != nil {
		return x.CatName
	}
	return ""
}

type CatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatMeaw string `protobuf:"bytes,1,opt,name=catMeaw,proto3" json:"catMeaw,omitempty"`
}

func (x *CatResponse) Reset() {
	*x = CatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatResponse) ProtoMessage() {}

func (x *CatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatResponse.ProtoReflect.Descriptor instead.
func (*CatResponse) Descriptor() ([]byte, []int) {
	return file_cat_proto_rawDescGZIP(), []int{1}
}

func (x *CatResponse) GetCatMeaw() string {
	if x != nil {
		return x.CatMeaw
	}
	return ""
}

type AnalyzeCatSoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatName string `protobuf:"bytes,1,opt,name=catName,proto3" json:"catName,omitempty"`
}

func (x *AnalyzeCatSoundRequest) Reset() {
	*x = AnalyzeCatSoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeCatSoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeCatSoundRequest) ProtoMessage() {}

func (x *AnalyzeCatSoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeCatSoundRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeCatSoundRequest) Descriptor() ([]byte, []int) {
	return file_cat_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeCatSoundRequest) GetCatName() string {
	if x != nil {
		return x.CatName
	}
	return ""
}

type AnalyzeCatSoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AnalyzeCatSoundResponse) Reset() {
	*x = AnalyzeCatSoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeCatSoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeCatSoundResponse) ProtoMessage() {}

func (x *AnalyzeCatSoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeCatSoundResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeCatSoundResponse) Descriptor() ([]byte, []int) {
	return file_cat_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyzeCatSoundResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_cat_proto protoreflect.FileDescriptor

var file_cat_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x43, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74,
	0x4d, 0x65, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x4d,
	0x65, 0x61, 0x77, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x61,
	0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x43, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x8d, 0x01, 0x0a, 0x03, 0x63,
	0x61, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43,
	0x61, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x61, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cat_proto_rawDescOnce sync.Once
	file_cat_proto_rawDescData = file_cat_proto_rawDesc
)

func file_cat_proto_rawDescGZIP() []byte {
	file_cat_proto_rawDescOnce.Do(func() {
		file_cat_proto_rawDescData = protoimpl.X.CompressGZIP(file_cat_proto_rawDescData)
	})
	return file_cat_proto_rawDescData
}

var file_cat_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cat_proto_goTypes = []interface{}{
	(*CatRequest)(nil),              // 0: proto.CatRequest
	(*CatResponse)(nil),             // 1: proto.CatResponse
	(*AnalyzeCatSoundRequest)(nil),  // 2: proto.AnalyzeCatSoundRequest
	(*AnalyzeCatSoundResponse)(nil), // 3: proto.AnalyzeCatSoundResponse
}
var file_cat_proto_depIdxs = []int32{
	0, // 0: proto.cat.CallCat:input_type -> proto.CatRequest
	2, // 1: proto.cat.AnalyzeCatSound:input_type -> proto.AnalyzeCatSoundRequest
	1, // 2: proto.cat.CallCat:output_type -> proto.CatResponse
	3, // 3: proto.cat.AnalyzeCatSound:output_type -> proto.AnalyzeCatSoundResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cat_proto_init() }
func file_cat_proto_init() {
	if File_cat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeCatSoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeCatSoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cat_proto_goTypes,
		DependencyIndexes: file_cat_proto_depIdxs,
		MessageInfos:      file_cat_proto_msgTypes,
	}.Build()
	File_cat_proto = out.File
	file_cat_proto_rawDesc = nil
	file_cat_proto_goTypes = nil
	file_cat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CatClient is the client API for Cat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatClient interface {
	CallCat(ctx context.Context, in *CatRequest, opts ...grpc.CallOption) (*CatResponse, error)
	AnalyzeCatSound(ctx context.Context, in *AnalyzeCatSoundRequest, opts ...grpc.CallOption) (Cat_AnalyzeCatSoundClient, error)
}

type catClient struct {
	cc grpc.ClientConnInterface
}

func NewCatClient(cc grpc.ClientConnInterface) CatClient {
	return &catClient{cc}
}

func (c *catClient) CallCat(ctx context.Context, in *CatRequest, opts ...grpc.CallOption) (*CatResponse, error) {
	out := new(CatResponse)
	err := c.cc.Invoke(ctx, "/proto.cat/CallCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catClient) AnalyzeCatSound(ctx context.Context, in *AnalyzeCatSoundRequest, opts ...grpc.CallOption) (Cat_AnalyzeCatSoundClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cat_serviceDesc.Streams[0], "/proto.cat/AnalyzeCatSound", opts...)
	if err != nil {
		return nil, err
	}
	x := &catAnalyzeCatSoundClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cat_AnalyzeCatSoundClient interface {
	Recv() (*AnalyzeCatSoundResponse, error)
	grpc.ClientStream
}

type catAnalyzeCatSoundClient struct {
	grpc.ClientStream
}

func (x *catAnalyzeCatSoundClient) Recv() (*AnalyzeCatSoundResponse, error) {
	m := new(AnalyzeCatSoundResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatServer is the server API for Cat service.
type CatServer interface {
	CallCat(context.Context, *CatRequest) (*CatResponse, error)
	AnalyzeCatSound(*AnalyzeCatSoundRequest, Cat_AnalyzeCatSoundServer) error
}

// UnimplementedCatServer can be embedded to have forward compatible implementations.
type UnimplementedCatServer struct {
}

func (*UnimplementedCatServer) CallCat(context.Context, *CatRequest) (*CatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallCat not implemented")
}
func (*UnimplementedCatServer) AnalyzeCatSound(*AnalyzeCatSoundRequest, Cat_AnalyzeCatSoundServer) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzeCatSound not implemented")
}

func RegisterCatServer(s *grpc.Server, srv CatServer) {
	s.RegisterService(&_Cat_serviceDesc, srv)
}

func _Cat_CallCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).CallCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.cat/CallCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).CallCat(ctx, req.(*CatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cat_AnalyzeCatSound_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AnalyzeCatSoundRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatServer).AnalyzeCatSound(m, &catAnalyzeCatSoundServer{stream})
}

type Cat_AnalyzeCatSoundServer interface {
	Send(*AnalyzeCatSoundResponse) error
	grpc.ServerStream
}

type catAnalyzeCatSoundServer struct {
	grpc.ServerStream
}

func (x *catAnalyzeCatSoundServer) Send(m *AnalyzeCatSoundResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Cat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.cat",
	HandlerType: (*CatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallCat",
			Handler:    _Cat_CallCat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AnalyzeCatSound",
			Handler:       _Cat_AnalyzeCatSound_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cat.proto",
}
